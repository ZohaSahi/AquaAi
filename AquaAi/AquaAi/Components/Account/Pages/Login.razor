@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using AquaAi.Data
@using AquaAi.Components.Layout
@layout LoginLayout
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<style>
    :root {
        --yellow: #f5bf23;
        --black: #111;
        --white: #fff;
        --light-color: #666;
        --light-bg: #eee;
        --box-shadow: 0 .5rem 1rem rgba(0,0,0,.1);
        --border: .1rem solid rgba(0,0,0,.3);
    }
    * {
        font-family: 'Poppins', sans-serif;
        margin: 0;
        padding: 0;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        outline: none;
        border: none;
        text-decoration: none;
    }

    html {
        font-size: 62.5%;
        overflow-x: hidden;
        scroll-behavior: smooth;
        scroll-padding-top: 7rem;
    }

        html::-webkit-scrollbar {
            width: 1rem;
        }

        html::-webkit-scrollbar-track {
            background: transparent;
        }

        html::-webkit-scrollbar-thumb {
            background: var(--yellow);
        }

    section {
        padding: 5rem 10%;
    }

    .heading {
        margin-bottom: 3rem;
        font-size: 3rem;
        color: var(--black);
        text-transform: capitalize;
        padding-left: 1rem;
        border-left: 1rem solid var(--yellow);
    }

    .btn {
        display: inline-block;
        margin-top: 1rem;
        padding: 1rem 3rem;
        background: var(--black);
        color: var(--white);
        cursor: pointer;
        font-size: 1.7rem;
        text-transform: capitalize;
        -webkit-transition: .2s linear;
        transition: .2s linear;
    }

        .btn:hover {
            background: var(--yellow);
            color: var(--black);
        }
    .pagelogin .logo {
        font-size: 4rem;
        color: var(--black);
        text-transform: capitalize;
        text-decoration: none;
    }

    .pagelogin .logo-image {
        max-height: 6rem;
        margin-right: 1.5rem;
    }

    .pagelogin .logo span {
        color: var(--yellow);
    }
    .login-form {
        position: absolute;
        top: 15%;
        left: 50%;
        -webkit-transform: translateX(-50%);
        transform: translateX(-50%);
        width: 40rem;
        background: var(--white);
        -webkit-box-shadow: var(--box-shadow);
        box-shadow: var(--box-shadow);
        padding: 2rem;
        text-align: center;
        -webkit-animation: fadeIn .2s linear;
        animation: fadeIn .2s linear;
    }

    .pagelogin .login-form h3 {
        font-size: 2.5rem;
        color: var(--black);
        text-transform: capitalize;
        padding-bottom: 1rem;
        text-transform: uppercase;
    }

    .pagelogin .login-form .box {
        width: 100%;
        padding: 1.2rem 1.4rem;
        background: var(--light-bg);
        font-size: 1.6rem;
        color: var(--light-color);
        margin: .7rem 0;
    }

    .pagelogin .login-form .flex {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        gap: .5rem;
        padding-top: 1.5rem;
        padding-bottom: 1rem;
    }

        .pagelogin .login-form .flex label {
            font-size: 1.5rem;
            color: var(--light-color);
            cursor: pointer;
        }

        .pagelogin .login-form .flex a {
            font-size: 1.5rem;
            color: var(--light-color);
            margin-left: auto;
        }

            .pagelogin .login-form .flex a:hover {
                color: var(--yellow);
                text-decoration: underline;
            }

    .pagelogin .login-form .btn {
        width: 100%;
    }

    .pagelogin .login-form p {
        font-size: 1.5rem;
        color: var(--light-color);
        line-height: 2;
        padding-top: 1.5rem;
    }

        .pagelogin .login-form p a {
            color: var(--yellow);
        }

            .pagelogin .login-form p a:hover {
                text-decoration: underline;
            }

    .pagelogin .login-form .btn {
        display: inline-block;
        margin-top: 1rem;
        padding: 1rem 3rem;
        background: var(--black);
        color: var(--white);
        cursor: pointer;
        font-size: 1.7rem;
        text-transform: capitalize;
        -webkit-transition: .2s linear;
        transition: .2s linear;
    }

        .pagelogin .login-form .btn:hover {
            background: var(--yellow);
            color: var(--black);
        }
</style>
<div class="pagelogin">
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="login-form">
        <StatusMessage Message="@errorMessage" />
        <DataAnnotationsValidator />
        <a href="#" class="logo">
            <img src="images/AquaAiLogo.jpg" alt="AquaAi Logo" class="logo-image">Log<span>in</span>
        </a>
        <hr />
        <ValidationSummary class="text-danger" role="alert" />
        <InputText @bind-Value="Input.Email" class="box" autocomplete="username" aria-required="true" placeholder="enter your password" />
        <ValidationMessage For="() => Input.Email" class="text-danger" />
        <InputText type="password" @bind-Value="Input.Password" class="box" autocomplete="current-password" aria-required="true" placeholder="enter your password" />
        <ValidationMessage For="() => Input.Password" class="text-danger" />
        <div class="flex">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
            <label for="remember-me">remember me</label>
            <a href="Account/ForgotPassword">Forgot password?</a>
        </div>
        <button type="submit" class="btn">Log in</button>
        <p>
            don't have an account<a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"> Create one!</a>
        </p>
        <p>
            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>

        </p>

    </EditForm>
</div>
@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SignInManager.SignOutAsync();
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/Payment/invoicess");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}