@page "/Account/Register"
@using AquaAi.Components.Layout
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using AquaAi.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<style>
    :root {
        --yellow: #f5bf23;
        --black: #111;
        --white: #fff;
        --light-color: #666;
        --light-bg: #eee;
        --box-shadow: 0 .5rem 1rem rgba(0,0,0,.1);
        --border: .1rem solid rgba(0,0,0,.3);
    }

    * {
        font-family: 'Poppins', sans-serif;
        margin: 0;
        padding: 0;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        outline: none;
        border: none;
        text-decoration: none;
    }

    html {
        font-size: 62.5%;
        overflow-x: hidden;
        scroll-behavior: smooth;
        scroll-padding-top: 7rem;
    }

        html::-webkit-scrollbar {
            width: 1rem;
        }

        html::-webkit-scrollbar-track {
            background: transparent;
        }

        html::-webkit-scrollbar-thumb {
            background: var(--yellow);
        }

    section {
        padding: 5rem 10%;
    }

    .heading {
        margin-bottom: 3rem;
        font-size: 3rem;
        color: var(--black);
        text-transform: capitalize;
        padding-left: 1rem;
        border-left: 1rem solid var(--yellow);
    }

    .btn {
        display: inline-block;
        margin-top: 1rem;
        padding: 1rem 3rem;
        background: var(--black);
        color: var(--white);
        cursor: pointer;
        font-size: 1.7rem;
        text-transform: capitalize;
        -webkit-transition: .2s linear;
        transition: .2s linear;
    }

        .btn:hover {
            background: var(--yellow);
            color: var(--black);
        }
    .pagelogin .logo {
        font-size: 3rem;
        color: var(--black);
        text-transform: capitalize;
        text-decoration: none;
    }

    .pagelogin .logo-image {
        max-height: 6rem;
        margin-right: 1.5rem;
    }

    .pagelogin .logo span {
        color: var(--yellow);
    }

    .login-form {
        position: absolute;
        top: 15%;
        left: 50%;
        -webkit-transform: translateX(-50%);
        transform: translateX(-50%);
        width: 40rem;
        background: var(--white);
        -webkit-box-shadow: var(--box-shadow);
        box-shadow: var(--box-shadow);
        padding: 2rem;
        text-align: center;
        -webkit-animation: fadeIn .2s linear;
        animation: fadeIn .2s linear;
    }

    .pagelogin .login-form h3 {
        font-size: 2.5rem;
        color: var(--black);
        text-transform: capitalize;
        padding-bottom: 1rem;
        text-transform: uppercase;
    }

    .pagelogin .login-form .box {
        width: 100%;
        padding: 1.2rem 1.4rem;
        background: var(--light-bg);
        font-size: 1.6rem;
        color: var(--light-color);
        margin: .7rem 0;
    }

    .pagelogin .login-form .flex {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        gap: .5rem;
        padding-top: 1.5rem;
        padding-bottom: 1rem;
    }

        .pagelogin .login-form .flex label {
            font-size: 1.5rem;
            color: var(--light-color);
            cursor: pointer;
        }

        .pagelogin .login-form .flex a {
            font-size: 1.5rem;
            color: var(--light-color);
            margin-left: auto;
        }

            .pagelogin .login-form .flex a:hover {
                color: var(--yellow);
                text-decoration: underline;
            }

    .pagelogin .login-form .btn {
        width: 100%;
    }

    .pagelogin .login-form p {
        font-size: 1.5rem;
        color: var(--light-color);
        line-height: 2;
        padding-top: 1.5rem;
    }

        .pagelogin .login-form p a {
            color: var(--yellow);
        }

            .pagelogin .login-form p a:hover {
                text-decoration: underline;
            }

    .pagelogin .login-form .btn {
        display: inline-block;
        margin-top: 1rem;
        padding: 1rem 3rem;
        background: var(--black);
        color: var(--white);
        cursor: pointer;
        font-size: 1.7rem;
        text-transform: capitalize;
        -webkit-transition: .2s linear;
        transition: .2s linear;
    }

        .pagelogin .login-form .btn:hover {
            background: var(--yellow);
            color: var(--black);
        }

    
    </style>
<header class="pagelogin">
    <StatusMessage Message="@Message" />
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" class="login-form">
        <StatusMessage Message="@Message" />
        <DataAnnotationsValidator />
        <a href="#" class="logo">
            <img src="images/AquaAiLogo.jpg" alt="AquaAi Logo" class="logo-image">Create<span>Account</span>
        </a>        
        <hr />
        <ValidationSummary class="text-danger" role="alert" />
        <InputText @bind-Value="Input.Email" class="box" autocomplete="username" aria-required="true" placeholder="enter your email" />
        <ValidationMessage For="() => Input.Email" class="text-danger" />
        <InputText type="password" @bind-Value="Input.Password" class="box" autocomplete="new-password" aria-required="true" placeholder="enter your password" />
        <ValidationMessage For="() => Input.Password" class="text-danger" />
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="box" autocomplete="new-password" aria-required="true" placeholder="confirm your password" />
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        <button type="submit" class="btn">Register</button>
    </EditForm>
</header>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}