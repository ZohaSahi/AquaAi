@page "/AquaLiquid"
@using AquaAi.shared.Models
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject ISnackbar _snackBar
@inject IDialogService _dialogService
@inject IJSRuntime JSRuntime
@using MudBlazor
@using AquaAi.Components.Layout
@layout DashboardLayout

<style>
    .mud-table-container {
        overflow: auto;
    }
 h5{
        padding-left:20px;
    }
</style>
<MudText Typo="Typo.h5" Style="font-size:20px;">Manage Liquids</MudText>
<MudTable Elevation="25" Items="@Liquids" Dense="@dense" Striped="@striped" Filter="new Func<Liquid,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudGrid Class="table-container">
            <MudItem xs="12" md="12" lg="12" sm="12" xl="12" xxl="12" Class="d-flex flex-row" Style="padding-top: 120px;">
                <MudItem xs="4" md="4" lg="4" sm="4" xl="12" xxl="4" Class="d-flex flex-row" Style="padding-top: 10px;">
                    <div class="justify-center mud-text-align-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" OnClick="@(() => ShowModal())">Create</MudButton>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary" Style="margin-left:2px" OnClick="@ReloadLiquids">Reload</MudButton>
                    </div>
                </MudItem>
                <MudItem xs="4" md="4" lg="4" sm="4" xl="12" xxl="4" Class="d-flex flex-row">
                </MudItem>
                <MudItem xs="4" md="4" lg="4" sm="4" xl="12" xxl="4" Class="d-flex flex-row">
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </MudItem>
            </MudItem>
            <MudItem xs="12" md="12" lg="12" sm="12" xl="12" xxl="12">
                <MudDivider DividerType="DividerType.FullWidth" Style="background-color: #1e88e5; height: 2px;"></MudDivider>
            </MudItem>
        </MudGrid>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="padding-top:125px;padding-left:40px;">Liquid ID</MudTh>
        <MudTh Style="padding-top:125px;padding-left:70px;">Liquid Name</MudTh>
        <MudTh Style="padding-top:125px;padding-left:70px;">Tank Height</MudTh>
        <MudTh Style="padding-top:125px;padding-left:70px;">Tank Width</MudTh>
        <MudTh Style="padding-top:125px;padding-left:70px;">Liquid Price</MudTh>
        <MudTh Style="padding-top:125px;padding-left:70px;">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="padding-left:50px;" DataLabel="Liquid ID">@context.LiquidId</MudTd>
        <MudTd Style="padding-left:80px;"  DataLabel="Liquid Name">@context.LiquidName</MudTd>
        <MudTd Style="padding-left:80px;" DataLabel="Height">@context.Height</MudTd>
        <MudTd Style="padding-left:80px;" DataLabel="Width">@context.Width</MudTd>
        <MudTd Style="padding-left:80px;" DataLabel="Liquid Price">@context.Liquid_price</MudTd>
        <MudTd Style="padding-left:50px;" DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => ShowModal(@context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteLiquid(@context.LiquidId))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary" Style="margin-left: 5px;">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary" Style="margin-left: 5px;">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary" Style="margin-left: 5px;">Striped</MudSwitch>
    <MudSpacer />
</div>

@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;

    private string searchString = "";
    private Liquid selectedItem = null;
    private HashSet<Liquid> selectedItems = new HashSet<Liquid>();

    private IEnumerable<Liquid> Liquids = new List<Liquid>();

    protected override async Task OnInitializedAsync()
    {
        await ReloadLiquids();
    }

    private async Task ReloadLiquids()
    {
        Liquids = await httpClient.GetFromJsonAsync<List<Liquid>>("api/liquids");
        StateHasChanged();
    }

    private bool FilterFunc1(Liquid liquid) => FilterFunc(liquid, searchString);

    private bool FilterFunc(Liquid liquid, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (liquid.LiquidName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{liquid.LiquidId} {liquid.Width} {liquid.Height} {liquid.Liquid_price}".Contains(searchString))
            return true;
        return false;
    }

    private async Task ShowModal(Liquid liquid = null)
    {
        var parameters = new DialogParameters();
        parameters.Add("Liquid", liquid ?? new Liquid());
        parameters.Add("IsEditMode", liquid != null);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = _dialogService.Show<EditLiquidModal>("Liquid Modal", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ReloadLiquids();
            _snackBar.Add($"Liquid {(liquid != null ? "updated" : "created")} successfully", Severity.Success);
        }
    }

    private async Task DeleteLiquid(int liquidId)
    {
        await httpClient.DeleteAsync($"api/liquids/{liquidId}");
        await ReloadLiquids();
        _snackBar.Add("Liquid deleted successfully", Severity.Error);
    }
}
